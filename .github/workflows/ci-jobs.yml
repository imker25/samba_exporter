name: CI Jobs
on: [push, pull_request]
jobs:
  build-unit_test:
    strategy:
      matrix:
        go-version: [1.16.x]
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v2
      with:
       fetch-depth: 0
    - name: Install Go and java
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: "build and unit-test"
      env:
        GITHUB_RUNNER_OS:  ${{ matrix.os }}
      uses: eskatos/gradle-command-action@v1
      with:
        arguments: getBuildName build test preparePack
    - name: "Convert test results"
      uses: eskatos/gradle-command-action@v1
      if: always()
      with:
        arguments: convertTestResults
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always()
      with:
        files: logs/TestsResult.xml
    - name: 'Get Package name and version from logs/ to GITHUB_ENVIRONMENT'
      run: ./build/GithubEnv.sh           
    - name: 'Upload Artifact samba_exporter'
      uses: actions/upload-artifact@v2
      with:
        name: samba_exporter-${{ matrix.os }}
        path: bin/samba_exporter
        retention-days: 1
    - name: 'Upload Artifact samba_statusd'
      uses: actions/upload-artifact@v2
      with:
        name: samba_statusd-${{ matrix.os }}
        path: bin/samba_statusd
        retention-days: 1
    - name: 'Upload Artifact PackageName.txt'
      uses: actions/upload-artifact@v2
      with:
        name: PackageName-${{ matrix.os }}.txt
        path: logs/PackageName.txt
        retention-days: 1 
    - name: 'Upload Artifact ShortVersion.txt'
      uses: actions/upload-artifact@v2
      with:
        name: ShortVersion-${{ matrix.os }}.txt
        path: logs/ShortVersion.txt
        retention-days: 1 
    - name: 'Create man pages'
      run:  |
              sudo apt-get update
              sudo apt-get install -y ronn
              build/CreateManPage.sh  
    - name: 'Fix file ownership'
      run: sudo chown root:root -R tmp/${{ env.SAMBA_EXPORTER_PACKAGE_NAME }}                 
    - uses: jiro4989/build-deb-action@v2
      name: "Pack deb package"
      with:
        package: ${{ env.SAMBA_EXPORTER_PACKAGE }}
        package_root: tmp/${{ env.SAMBA_EXPORTER_PACKAGE_NAME }}
        maintainer: ${{ env.SAMBA_EXPORTER_PACKAGE_MAINTAINER }}
        version: ${{ env.SAMBA_EXPORTER_VERSION }}
        depends: ${{ env.SAMBA_EXPORTER_PACKAGE_DEPENDS }}
        desc: ${{ env.SAMBA_EXPORTER_PACKAGE_DESCRIPTION }} 
    - name: "Upload Artifact samba_exporter*.deb"
      uses: actions/upload-artifact@v2
      with:
        name: samba_exporter-${{ matrix.os }}.deb
        path: ${{ env.SAMBA_EXPORTER_PACKAGE_NAME }}_amd64.deb
        retention-days: 1                          
  integration-test:
    needs: build-unit_test
    strategy:
      matrix:
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - name: Download samba_exporter artifact
        uses: actions/download-artifact@v2
        with:
          name: samba_exporter-${{ matrix.os }}
          path: bin/samba_exporter  
      - name: Download samba_statusd artifact
        uses: actions/download-artifact@v2  
        with:
          name: samba_statusd-${{ matrix.os }}
          path: bin/samba_statusd
      - name: Check artifacts
        run: ls -l bin/
      - name: Build test environment container
        run: docker build --file test/integrationTest/docker/Dockerfile.ubuntu --tag integration-test-container .
      - name: Run integration tests
        run: docker run -i integration-test-container /bin/bash -c "/RunIntegrationTests.sh container"
  installation-test:
    needs: build-unit_test
    strategy:
      matrix:
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    steps: 
    - uses: actions/checkout@v2
    - name: Download PackageName.txt artifact
      uses: actions/download-artifact@v2
      with:
        name: PackageName-${{ matrix.os }}.txt   
        path: logs/ 
    - name: Download samba_exporter package artifact
      uses: actions/download-artifact@v2
      with:
        name: samba_exporter-${{ matrix.os }}.deb  
        path: .           
    - name: 'Get Package name from logs/PackageName.txt'
      run: ./build/GithubEnv.sh        
    - name: "Run installation tests"
      env:
        SAMBA_EXPORTER_PACKAGE_NAME:  ${{ env.SAMBA_EXPORTER_PACKAGE_NAME }}
      run: test/installationTest/RunInstallationTest.sh
  release-to-github:
    needs: [ installation-test, integration-test ]
    runs-on: "ubuntu-20.04"
    if: ((github.ref == 'refs/heads/main') || contains(github.ref, 'release'))
    timeout-minutes: 10
    steps: 
    - uses: actions/checkout@v2      
    - name: Download samba_exporter package artifact
      uses: actions/download-artifact@v2
      with:
        name: samba_exporter-ubuntu-20.04.deb  
        path: . 
    - name: Download PackageName.txt artifact
      uses: actions/download-artifact@v2
      with:
        name: PackageName-ubuntu-20.04.txt   
        path: logs/ubuntu-20.04/         
    - name: Download ShortVersion.txt artifact
      uses: actions/download-artifact@v2
      with:
        name: ShortVersion-ubuntu-20.04.txt   
        path: logs/  
    - name: 'Get needed environment from artifacts'
      run: |
            packageubuntu2004Name=$(cat logs/ubuntu-20.04/PackageName.txt)
            echo "SAMBA_EXPORTER_UBUNTU_2004_PACKAGE_NAME=$packageubuntu2004Name"
            echo "SAMBA_EXPORTER_UBUNTU_2004_PACKAGE_NAME=$packageubuntu2004Name" >> $GITHUB_ENV       
            shortVersion=$(cat logs/ShortVersion.txt)
            if [ "$GITHUB_REF" == 'refs/heads/main' ]; then
                  echo "SAMBA_EXPORTER_PRE_RELEASE=true"
                  echo "SAMBA_EXPORTER_PRE_RELEASE=true" >> $GITHUB_ENV 

                  echo "SAMBA_EXPORTER_SHORT_VERSION=$shortVersion-pre"
                  echo "SAMBA_EXPORTER_SHORT_VERSION=$shortVersion-pre" >> $GITHUB_ENV  

                  echo "SAMBA_EXPORTER_RELEASE_TITLE=Pre release of samba_exporter packages"
                  echo "SAMBA_EXPORTER_RELEASE_TITLE=Pre release of samba_exporter packages"  >> $GITHUB_ENV                 
            else 
                  echo "SAMBA_EXPORTER_PRE_RELEASE=false"
                  echo "SAMBA_EXPORTER_PRE_RELEASE=false" >> $GITHUB_ENV 

                  echo "SAMBA_EXPORTER_SHORT_VERSION=$shortVersion"
                  echo "SAMBA_EXPORTER_SHORT_VERSION=$shortVersion" >> $GITHUB_ENV   
                  
                  echo "SAMBA_EXPORTER_RELEASE_TITLE=Pre release of samba_exporter packages"
                  echo "SAMBA_EXPORTER_RELEASE_TITLE=Release of samba_exporter packages"  >> $GITHUB_ENV                      
            fi
    - uses: "marvinpinto/action-automatic-releases@latest"
      name: Release the packages
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: ${{ env.SAMBA_EXPORTER_SHORT_VERSION }}
        prerelease: ${{ env.SAMBA_EXPORTER_PRE_RELEASE }}
        title: ${{ env.SAMBA_EXPORTER_RELEASE_TITLE}}
        files: |
          ${{ env.SAMBA_EXPORTER_UBUNTU_2004_PACKAGE_NAME }}_amd64.deb            
