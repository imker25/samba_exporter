name: CI Job
on: [push, pull_request]
jobs:
  build-unit_test:
    strategy:
      matrix:
        go-version: [1.14.x]
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      with:
       fetch-depth: 0
    - name: Install Go and java
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go-version }}
    - uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: "build and unit-test"
      env:
        GITHUB_RUNNER_OS:  ${{ matrix.os }}
      uses: eskatos/gradle-command-action@v1
      with:
        arguments: getBuildName build test preparePack
    - name: "Convert test results"
      uses: eskatos/gradle-command-action@v1
      if: always()
      with:
        arguments: convertTestResults
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always()
      with:
        files: logs/TestsResult.xml
    - name: 'Upload Artifact samba_exporter'
      uses: actions/upload-artifact@v2
      with:
        name: samba_exporter
        path: bin/samba_exporter
        retention-days: 1
    - name: 'Upload Artifact samba_statusd'
      uses: actions/upload-artifact@v2
      with:
        name: samba_statusd
        path: bin/samba_statusd
        retention-days: 1
    - name: 'Upload Artifact PackageName.txt'
      uses: actions/upload-artifact@v2
      with:
        name: PackageName.txt
        path: logs/PackageName.txt
        retention-days: 1 
    - name: 'Get Package name and version from logs/'
      run: |
            packageName=$(cat logs/PackageName.txt)
            echo "SAMBA_EXPORTER_PACKAGE_NAME=$SAMBA_EXPORTER_PACKAGE_NAME"
            echo "SAMBA_EXPORTER_PACKAGE_NAME=$packageName" >> $GITHUB_ENV   
            packageVersion=$(cat logs/Version.txt)  
            echo "SAMBA_EXPORTER_VERSION=$packageVersion" 
            echo "SAMBA_EXPORTER_VERSION=$packageVersion"  >> $GITHUB_ENV   
    - uses: jiro4989/build-deb-action@v2
      name: "Pack deb package"
      with:
        package: samba_exporter
        package_root: tmp/${{ env.SAMBA_EXPORTER_PACKAGE_NAME }}
        maintainer: tobi@backfrak.de
        version: ${{ env.SAMBA_EXPORTER_VERSION }}
        arch: 'amd64'
        depends: 'libc6 (>= 2.3.2), systemd'
        desc: 'Prometheus exporter to get metrics of a samba server'  
    - name: "Upload Artifact samba_exporter*.deb"
      uses: actions/upload-artifact@v2
      with:
        name: samba_exporter.deb
        path: tmp/${{ env.SAMBA_EXPORTER_PACKAGE_NAME }}.deb
        retention-days: 1                          
  integration-test:
    needs: build-unit_test
    strategy:
      matrix:
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Download samba_exporter artifact
        uses: actions/download-artifact@v2
        with:
          name: samba_exporter
          path: bin/samba_exporter  
      - name: Download samba_statusd artifact
        uses: actions/download-artifact@v2  
        with:
          name: samba_statusd
          path: bin/samba_statusd
      - name: Check artifacts
        run: ls -l bin/
      - name: Build test environment container
        run: docker build --file test/integrationTest/docker/Dockerfile.ubuntu --tag integration-test-container .
      - name: Run integration tests
        run: docker run -i integration-test-container /bin/bash -c "/RunIntegrationTests.sh container"
  system-test:
    needs: build-unit_test
    strategy:
      matrix:
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Download samba_exporter artifact
        uses: actions/download-artifact@v2
        with:
          name: samba_exporter
          path: bin/samba_exporter  
      - name: Download samba_statusd artifact
        uses: actions/download-artifact@v2  
        with:
          name: samba_statusd
          path: bin/samba_statusd
      - name: Check artifacts
        run: ls -l bin/ &&  ls -l bin/samba_exporter/ && ls -l bin/samba_statusd/ 
      - name: Build test environment container
        run: docker build --file test/systemTest/docker/Dockerfile.ubuntu --tag system-test-container .
      - name: Run System tests
        run: docker run --security-opt seccomp=unconfined -v /sys/fs/cgroup:/sys/fs/cgroup:ro -i system-test-container /bin/bash -c "/RunSystemTest.sh"  
  installation-test:
    needs: build-unit_test
    strategy:
      matrix:
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    steps: 
    - uses: actions/checkout@v2
    - name: Download samba_exporter artifact
      uses: actions/download-artifact@v2
      with:
        name: PackageName.txt   
        path: logs/   
    - name: 'Get Package name from logs/PackageName.txt'
      run: |
            packageName=$(cat logs/PackageName.txt)
            echo "SAMBA_EXPORTER_PACKAGE_NAME=$SAMBA_EXPORTER_PACKAGE_NAME"
            echo "SAMBA_EXPORTER_PACKAGE_NAME=$packageName" >> $GITHUB_ENV      
    - name: "Run installation tests"
      env:
        SAMBA_EXPORTER_PACKAGE_NAME:  ${{ env.SAMBA_EXPORTER_PACKAGE_NAME }}
      run: echo "SAMBA_EXPORTER_PACKAGE_NAME=$SAMBA_EXPORTER_PACKAGE_NAME"