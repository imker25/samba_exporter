{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Index/","title":"Samba Exporter","text":"<p>A prometheus exporter for statistic data of the samba file server.</p> <p></p> <p>It uses smbstatus and the proc fs to collect the data and converts the result into prometheus style data. The prometheus style data can be requested manually on port 9922 using a http client. Or a prometheus database sever can be configured to collect the data by scraping port 9922 on the samba server.</p>"},{"location":"Index/#lear-more","title":"Lear more","text":"<ul> <li>User Guide</li> <li>Concept</li> </ul>"},{"location":"Index/#next-steps","title":"Next steps","text":"<ul> <li>Installation</li> <li>Grafana Stack Integration</li> </ul>"},{"location":"DeveloperDocs/ActionsAndReleases/","title":"GitHub Actions and Release Process","text":"<p>This page give information on the GitHub Actions and Release Process used by the project.</p>"},{"location":"DeveloperDocs/ActionsAndReleases/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>For continuous integration and deployment this project uses GitHub Actions. The main pipeline is defined in <code>.github/workflows/ci-jobs.yml</code>. This pipeline will will start on every commit pushed to GitHub and then run the steps shown below:</p> <pre><code>%%{init: {'theme':'dark'}}%%\ngraph TD;\n    push(Developer push to GitHub)\n    build[Build and unit tests]\n    docs[Test doc pages creation]\n    rpm[Test rpm package creation]\n    insTest[Installation tests]\n    intTest[Integration tests]\n    checkBranch{Check branch}\n    mainB((main))\n    releaseB((release/*))\n    otherB((other branch))\n    preRel[Create GitHub -pre release]\n    releaseP[Create GitHub release]\n    done(Pipeline end)\n\n    push--&gt;build;\n    push--&gt;docs;\n    push--&gt;rpm;\n    build--&gt;insTest;\n    build--&gt;intTest;\n\n    rpm--&gt;checkBranch;\n    docs--&gt;checkBranch;\n    insTest--&gt;checkBranch;\n    intTest--&gt;checkBranch;\n    checkBranch--&gt;mainB\n    checkBranch--&gt;releaseB\n    checkBranch--&gt;otherB\n    releaseB--&gt;releaseP\n    mainB--&gt;preRel\n    otherB--&gt;done\n    releaseP--&gt;done\n    preRel--&gt;done\n</code></pre>"},{"location":"DeveloperDocs/ActionsAndReleases/#release-pipeline","title":"Release Pipeline","text":"<p>After a GitHub release (also -pre) is created by the the CI/CD pipeline the <code>.github/workflows/release-jobs.yml</code> will be triggered. This job does the following workflow:</p> <pre><code>%%{init: {'theme':'dark'}}%%\ngraph TD;\n    release(GitHub release created)\n    buildUbuntu[Build Ubuntu *.deb packages]\n    buildDebian[Build Debian *.deb packages]\n    docs[Documentation pages creation]\n    repoDeb[Debian repository creation]\n    releaseUbuntuLP[Push Ubuntu *.deb to Launchpad]\n    releaseGH-Deb[Add all created *.deb packages to the GitHub release that triggered this pipeline]\n    pagesRelease[Release on Github pages - Documentation and Debian repository]\n    done(Pipeline end)\n    checkRelease1{Check release}\n    preRelease1(( -pre release))\n    fullRelease1((release))\n\n    checkRelease3{Check release}\n    preRelease3(( -pre release))\n    fullRelease3((release))\n\n    buildFedora[Build Fedora *.rpm packages]\n\n    checkRelease4{Check release}\n    preRelease4(( -pre release))\n    fullRelease4((release))\n    uploadCopr[Upload Fedora *.src.rpm to Copr]\n    buildRHEL[Build RHEL 8 *.rpm]\n\n    releaseGH-Rpm[Add all created *.rpm packages to the GitHub release that triggered this pipeline]\n    repoRpm[RPM repository creation]\n\n    release--&gt;buildUbuntu\n    buildUbuntu--&gt;checkRelease1\n    checkRelease1--&gt;preRelease1\n    checkRelease1--&gt;fullRelease1\n    fullRelease1--&gt;releaseUbuntuLP\n    releaseUbuntuLP--&gt;buildDebian\n    preRelease1 --&gt; buildDebian\n\n    buildDebian--&gt;releaseGH-Deb\n    releaseGH-Deb--&gt;docs\n\n\n    release--&gt;buildFedora\n    buildFedora--&gt;checkRelease4\n    checkRelease4--&gt;preRelease4\n    checkRelease4--&gt;fullRelease4\n    fullRelease4--&gt;uploadCopr\n    uploadCopr--&gt;buildRHEL\n    preRelease4--&gt;buildRHEL\n    buildRHEL--&gt;releaseGH-Rpm\n    releaseGH-Rpm--&gt;docs\n\n    docs--&gt;repoDeb\n    repoDeb--&gt;repoRpm\n    repoRpm--&gt;checkRelease3\n\n    checkRelease3--&gt;preRelease3\n    checkRelease3--&gt;fullRelease3\n    fullRelease3--&gt;pagesRelease\n\n    pagesRelease--&gt;done\n    preRelease3--&gt;done\n</code></pre>"},{"location":"DeveloperDocs/ActionsAndReleases/#launchpad-release","title":"Launchpad release","text":"<p>Whenever a *.deb package is uploaded to the samba-exporter PPA launchpad will start a own release process. When this process is finished (usually takes about an hour), users can download and install the new package version from the PPA.</p> <p>This uploads are done by the Release Pipeline for each full Release (no <code>-pre</code> Tag), as shown by the workflow diagram.</p>"},{"location":"DeveloperDocs/ActionsAndReleases/#copr-release","title":"Copr release","text":"<p>Whenever a *.src.rpm package is uploaded to the samba-exporter COPR copr will start a own release process. When this process is finished (usually takes about 10 minutes), users can download and install the new package version from the copr reposioty.</p> <p>This uploads are done by the Release Pipeline for each full Release  (no <code>-pre</code> Tag), as shown by the workflow diagram.</p>"},{"location":"DeveloperDocs/ActionsAndReleases/#creation-of-release-branches","title":"Creation of release branches","text":"<p>The release process of this project is fully automated. To create a new release (not -pre) of the software use the script <code>build/PrepareRelease.sh</code>. Before running the script ensure you are on <code>main</code> branch and got the latest changes from GitHub origin. This script will:</p> <ul> <li>Create a release branch from the current state at the main branch</li> <li>Update the <code>VersionMaster.txt</code> with a new increment version on main branch</li> <li>Commit the changes on the main branch</li> <li>Push all changes on main and the new release branch to GitHub</li> </ul> <p>Once this changes are pushed to github the CI/CD pipeline will start to run for both, <code>main</code> and the new <code>release</code> branch. This will create a new -pre Release from <code>main</code> as well as a new full Release  from the new <code>release</code> branch. This new releases will then trigger two release pipeline jobs. One for the -pre and one for the full release. As shown above the full release will be published on Launchpad and copr by the release pipeline if all is fine.</p> <p>As shown by the CI/CD Pipeline workflow GtiHub <code>-pre</code> releases will be created for every commit pushed to the <code>main</code> branch on GitHub.</p> <p>GtiHub full releases will be created by every commit to a <code>release/*</code> branch and will be published for package manager (<code>dnf</code>/<code>yum</code> or <code>apt</code>) installation by the end user at the corresponding repositories. GtiHub full releases also publish a new version of the docs page automatically.</p>"},{"location":"DeveloperDocs/Compile/","title":"Developer Guide","text":"<p>This page shows you how to build, test and install the project manually.</p>"},{"location":"DeveloperDocs/Compile/#build","title":"Build","text":"<p>To build the project you need the following on your development machine.</p> <ul> <li>Go Version 1.16.x or later</li> <li>Git &gt;= Version 2.30</li> <li>lsb_release</li> <li>ronn - Only in case you want to work on man pages</li> </ul> <p>To build the software change to the repositories directory and run:</p> <pre><code>./build.sh build \n</code></pre> <p>To figure out all the valid tasks, read <code>./build.sh -l</code></p>"},{"location":"DeveloperDocs/Compile/#create-man-pages","title":"Create man pages","text":"<p>To create the man pages out of the <code>*.ronn</code> source files in <code>src/man</code> run:</p> <pre><code>build/CreateManPage.sh \n</code></pre>"},{"location":"DeveloperDocs/Compile/#run-tests-locally","title":"Run Tests locally","text":"<p>To execute the unit tests you can run:</p> <pre><code>./build.sh test\n</code></pre> <p>Hint: As always it is possible to combine the commands, e. g. <code>./build.sh build test</code></p> <p>To execute the integration tests you can run:</p> <pre><code>./test/integrationTest/scripts/RunIntegrationTests.sh\n</code></pre>"},{"location":"DeveloperDocs/Compile/#manual-installation","title":"Manual installation","text":"<p>On your target machine, the samba server you want to monitor, you need samba and systemd installed.</p> <p>To build for manual installation run the following:</p> <pre><code>./build.sh preparePack\nbuild/CreateManPage.sh \n</code></pre> <p>For manual install on the <code>target</code> machine do the following copy after you build the project as shown above:</p> <pre><code>rsync -avr --exclude 'DEBIAN' --exclude 'samba-exporter.spec' ./tmp/samba-exporter_&lt;version&gt;/* root@&lt;target&gt;:/  \n</code></pre> <p>Now login to your target machine and run the commands below to enable the services and create the needed user and group:</p> <pre><code>systemctl daemon-reload\nsystemctl enable samba_statusd.service\nsystemctl enable samba_exporter.service\naddgroup --system samba-exporter\nadduser --system --no-create-home --disabled-login samba-exporter\nadduser samba-exporter samba-exporter\nmandb                                                               # In case you created and copied the man pages as well\n</code></pre> <p>Finally you are abel to start the services:</p> <pre><code>systemctl start samba_statusd.service\nsystemctl start samba_exporter.service\n</code></pre>"},{"location":"DeveloperDocs/Compile/#test-installation","title":"Test installation","text":"<p>Test the <code>samba_exporter</code> by requesting metrics with <code>curl</code>:</p> <pre><code>curl http://127.0.0.1:9922/metrics \n</code></pre> <p>The output of this test should look something like this:</p> <pre><code># HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.\n# TYPE go_gc_duration_seconds summary\ngo_gc_duration_seconds{quantile=\"0\"} 0\n...\n# HELP promhttp_metric_handler_requests_in_flight Current number of scrapes being served.\n# TYPE promhttp_metric_handler_requests_in_flight gauge\npromhttp_metric_handler_requests_in_flight 1\n# HELP promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code.\n# TYPE promhttp_metric_handler_requests_total counter\npromhttp_metric_handler_requests_total{code=\"200\"} 0\npromhttp_metric_handler_requests_total{code=\"500\"} 0\npromhttp_metric_handler_requests_total{code=\"503\"} 0\n# HELP samba_client_count Number of clients using the samba server\n# TYPE samba_client_count gauge\nsamba_client_count 0\n# HELP samba_individual_user_count The number of users connected to this samba server\n# TYPE samba_individual_user_count gauge\nsamba_individual_user_count 0\n# HELP samba_locked_file_count Number of files locked by the samba server\n# TYPE samba_locked_file_count gauge\nsamba_locked_file_count 0\n# HELP samba_pid_count Number of processes running by the samba server\n# TYPE samba_pid_count gauge\nsamba_pid_count 0\n# HELP samba_satutsd_up 1 if the samba_statusd seems to be running\n# TYPE samba_satutsd_up gauge\nsamba_satutsd_up 1\n# HELP samba_server_up 1 if the samba server seems to be running\n# TYPE samba_server_up gauge\nsamba_server_up 1\n# HELP samba_share_count Number of shares used by clients of the samba server\n# TYPE samba_share_count gauge\nsamba_share_count 0\n</code></pre>"},{"location":"DeveloperDocs/Hints/","title":"Developer Hints","text":""},{"location":"DeveloperDocs/Hints/#vscode-settings","title":"VSCode Settings","text":"<p>In case you want develop this software with VS Code you need to add the repositories root folder to the GOPATH within the <code>VS Code Settings</code> to get golang extension and golang tools work, e. g.:</p> <pre><code>{\n      \"go.gopath\": \"${env:GOPATH}:${workspaceFolder}\",\n}\n</code></pre>"},{"location":"DeveloperDocs/Hints/#debugging","title":"Debugging","text":"<p>For debugging the pipe communication you might want to use the <code>-test-mode</code> on <code>samba_statusd</code> and <code>samba_exporter</code>.</p> <p>Remark: Never use <code>-test-mode</code> on just one of the two programs.</p>"},{"location":"Installation/InstallationGuide/","title":"Installation Guide","text":"<p>Below you can find installation guides for the supported versions.</p>"},{"location":"Installation/InstallationGuide/#ubuntu-launchpad","title":"Ubuntu Launchpad","text":"<p>The samba exporter package for Ubuntu is published on launchpad. To install from there do the following commands on any supported Ubuntu version:</p> <pre><code>sudo add-apt-repository ppa:imker/samba-exporter-ppa\nsudo apt-get update\nsudo apt-get install samba-exporter\n</code></pre>"},{"location":"Installation/InstallationGuide/#debian","title":"Debian","text":"<p>The samba exporter package for Debian is published on the projects GitHub Page. To install execute the commands shown below as root:</p> <pre><code>wget -qO - https://imker25.github.io/samba_exporter/repos/debian/archive.key | sudo apt-key add -\necho \"deb https://imker25.github.io/samba_exporter/repos/debian bullseye main\" &gt; /etc/apt/sources.list.d/samba-exporter.list\napt-get update\napt-get install samba-exporter\n</code></pre> <p>Hint: Change <code>bullseye</code> to <code>bookworm</code> in case you use Debian 12.</p>"},{"location":"Installation/InstallationGuide/#fedora-35-and-later","title":"Fedora 35 and later","text":"<p>The samba exporter package for Fedora is published on  copr. To install from there do the following commands on any supported Fedora version:</p> <pre><code>sudo dnf copr enable imker25/samba-exporter\nsudo dnf update\nsudo dnf install samba-exporter\n</code></pre>"},{"location":"Installation/InstallationGuide/#rhel-8-centos-8-centos-stream-8-fedora-28","title":"RHEL 8 / CentOS 8 / CentOS Stream 8 / Fedora 28","text":"<p>For Redhat Enterprise Linux 8 and all compatible distributions the samba exporter package is published on the projects GitHub Page. To install execute the commands shown below as root:</p> <pre><code>wget -O /dev/shm/archive.key https://imker25.github.io/samba_exporter/repos/debian/archive.key\nrpm --import /dev/shm/archive.key\ndnf config-manager --add-repo https://imker25.github.io/samba_exporter/repos/rpm/fedora/releases/28/x86_64\ndnf update\ndnf install samba-exporter\n</code></pre>"},{"location":"Installation/InstallationGuide/#rhel-9-centos-stream-9-fedora-35","title":"RHEL 9 / CentOS Stream 9 / Fedora 35","text":"<p>For Redhat Enterprise Linux 9 and all compatible distributions the samba exporter package is published on the projects GitHub Page. To install execute the commands shown below as root:</p> <pre><code>wget -O /dev/shm/archive.key https://imker25.github.io/samba_exporter/repos/debian/archive.key\nrpm --import /dev/shm/archive.key\ndnf config-manager --add-repo https://imker25.github.io/samba_exporter/repos/rpm/fedora/releases/35/x86_64\ndnf update\ndnf install samba-exporter\n</code></pre>"},{"location":"Installation/InstallationGuide/#github-releases-for-debian-based-distributions","title":"GitHub Releases - For debian based distributions","text":"<p>Install the latest Release by downloading the debian package according to your distribution and version and installing it. For example:</p> <pre><code>wget https://github.com/imker25/samba_exporter/releases/download/1.3.5-pre/samba-exporter_1.3.5-pre.ppa1.debian10_amd64.deb\nsudo dpkg --install ./samba-exporter_1.3.5-pre.ppa1.debian10_amd64.deb\n</code></pre> <p>Hint: Link and file name needs to be adapted to the latest release.</p> <p>It's also possible to download and install pre-releases from the GitHub this way.</p>"},{"location":"Installation/InstallationGuide/#github-releases-for-rpm-based-distributions","title":"GitHub Releases - For RPM based distributions","text":"<p>Install the latest Release by downloading the rpm package according to your distribution and version and installing it. For example:</p> <pre><code>wget https://github.com/imker25/samba_exporter/releases/download/1.12.5-pre/samba-exporter-1.12.5-1.fc35.x86_64.rpm\nsudo rpm -U samba-exporter-1.12.5-1.fc35.x86_64.rpm\n</code></pre> <p>Hint: Link and file name needs to be adapted to the latest release.</p> <p>It's also possible to download and install pre-releases from the GitHub this way.</p> <p>For manual installation see the Developer Guide.</p>"},{"location":"Installation/SupportedVersions/","title":"Supported Versions","text":""},{"location":"Installation/SupportedVersions/#debian-based","title":"Debian based","text":"<p>Ubuntu:</p> Version Code Name Supported Ubnutu 20.04 Focal Fossa no Ubnutu 21.04 Hirsute Hippo no Ubnutu 21.10 Impish Indri no Ubnutu 22.04 Jammy Jellyfish yes Ubnutu 22.10 Kinetic Kudu no Ubnutu 23.04 Lunar Lobster no Ubnutu 23.10 Mantic Minotaur no Ubnutu 24.04 Noble Numbat yes Ubnuntu 24.10 Oracular Oriole yes Ubnuntu 25.04 - planed <p>Debian:</p> Version Code Name Supported Debian 10 Buster no Debian 11 Bullseye yes Debian 12 Bookworm yes Debian 13 Trixie planed Debian testing Forky no"},{"location":"Installation/SupportedVersions/#rpm-based","title":"RPM based","text":"<p>Fedora:</p> Version Release Supported Fedora 28 2018-05-01 yes Fedora 29 2018-10-30 no Fedora 30 2019-04-29 no Fedora 31 2019-10-29 no Fedora 32 2020-04-28 no Fedora 33 2020-10-28 no Fedora 34 2021-04-27 no Fedora 35 2021-11-02 yes Fedora 36 2022-04-19 no Fedora 37 2022-11-15 no Fedora 38 2023-04-25 no Fedora 39 2023-10-24 no Fedora 40 2024-04-23 yes Fedora 41 2024-10-29 yes Fedora 42 XXX planed <p>CentOS Stream:</p> Version Release Supported CentOS Stream 8 yes CentOS Stream 9 yes <p>Red Hat Enterprise Linux:</p> Version Release Supported RHEL 8 2019-05-07 yes RHEL 9 2022-05-19 yes"},{"location":"UserDocs/Concept/","title":"Concept","text":"<p>Since the tool smbstatus provided by the samba project can only run with elevated rights, and a prometheus exporter always exposes a public network endpoint, the samba_exporter package contains two services.</p> <ul> <li>samba_exporter: The prometheus exporter service that exposes the public network endpoint for the prometheus server to collect the data running as non privileged user</li> <li>samba_statusd: The service uses <code>smbstatus</code> to collect data and return it when requested running as privileged user</li> </ul> <p>Both services can communicate using a named pipe owned by a common group, see diagram below.</p> <pre><code>%%{init: {'theme':'dark'}}%%\nsequenceDiagram\n    participant samba_exporter\n    participant request.pipe\n    participant response.pipe\n    participant samba_statusd\n    samba_exporter-&gt;&gt;request.pipe: Request status data\n    loop \n        samba_statusd -&gt;&gt; request.pipe: Check request data\n    end\n    samba_statusd -&gt;&gt; samba_statusd: Process request\n    samba_statusd -&gt;&gt; response.pipe: Send response data\n    loop \n        samba_exporter -&gt;&gt; response.pipe: Wait for response\n    end\n    samba_exporter -&gt;&gt; samba_exporter: Process response\n</code></pre>"},{"location":"UserDocs/ServiceIntegration/","title":"Grafana Stack Integration","text":"<p>Here you can find how to integrate the <code>samba-exporter</code> service with the prometheus monitoring stack.</p>"},{"location":"UserDocs/ServiceIntegration/#prometheus","title":"Prometheus","text":"<p>To add this exporter to your prometheus database you have to add the endpoint as scrape job to the <code>/etc/prometheus/prometheus.yml</code> on your prometheus server. Therefor add the lines shown below:</p> <pre><code>  - job_name: 'Samba exporter node on server.local'\n    metrics_path: metrics\n    static_configs:\n      - targets: ['server.local:9922']\n</code></pre> <p>Replace <code>server.local</code> with the network name of your samba server.</p>"},{"location":"UserDocs/ServiceIntegration/#grafana","title":"Grafana","text":"<p>For grafana an example dashboard is installed with the debian package and can be found at <code>/usr/share/doc/samba-exporter/grafana/SambaService.json</code></p> <p>Here is a screenshot of the example dashboard on a live system:</p> <p></p> <p>When importing this dashboard you need to change <code>server.local</code> to the network name of your samba server.</p> <p>Here is a screenshot to import dashboard with this example json file <code>SambaService.json</code>, and you need to replace the <code>prefix</code> name <code>server.local</code> with the network name of your samba server, like <code>localhost:9922</code>.</p> <p></p>"},{"location":"UserDocs/UserGuide/","title":"User Guide","text":"<p>For user documentation please read the man pages:</p> <ul> <li>samba_exporter</li> <li>samba_statusd</li> <li>start_samba_statusd</li> </ul> <p>In case you installed the package already, you can read the man pages using man. For example:</p> <pre><code>man samba_exporter\n</code></pre>"},{"location":"UserDocs/UserGuide/#exported-values","title":"Exported values","text":"<p>A list of all exported values can be found at the samba_exporter man page.</p>"}]}