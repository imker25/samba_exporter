{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"Index/","text":"Samba Exporter \u00b6 A prometheus exporter for statistic data of the samba file server . It uses smbstatus to collect the data and converts the result into prometheus style data. The prometheus style data can be requested manually on port 9922 using a http client. Or a prometheus database sever can be configured to collect the data by scraping port 9922 on the samba server. Next steps \u00b6 Installation","title":"Start Page"},{"location":"Index/#samba-exporter","text":"A prometheus exporter for statistic data of the samba file server . It uses smbstatus to collect the data and converts the result into prometheus style data. The prometheus style data can be requested manually on port 9922 using a http client. Or a prometheus database sever can be configured to collect the data by scraping port 9922 on the samba server.","title":"Samba Exporter"},{"location":"Index/#next-steps","text":"Installation","title":"Next steps"},{"location":"DeveloperDocs/ActionsAndReleases/","text":"GitHub Actions and Release Process \u00b6 This page give information on the GitHub Actions and Release Process used by the project. CI/CD Pipeline \u00b6 For continuous integration and deployment this project uses GitHub Actions . The main pipeline is defined in .github/workflows/ci-jobs.yml . This pipeline will do: On push to any branch on github Build the project and the man pages Run unit tests defined in *_test.go Run integration tests from test/integrationTest/scripts/RunIntegrationTests.sh Run installation tests from test/installationTest/RunInstallationTest.sh Build a debian binary package ( *.deb ) On push to main and release/* branch additionally Upload the binary package ( *.deb ) as GitHub Release In case it's the main branch the release will be a pre release On release/* branches it will be a full public release After a full public release is done from the the CI/CD run on the release/* branch .github/workflows/release-jobs.yml will be triggered. This job runs build/PublishLaunchpadInDocker.sh to: Create a binary and source package for Ubuntu 20.04 out of the just created release Modifies the sources so a native debian build works Create the binary package Create the source package Pushes the sources modified to a ubuntu-20.04 branch on launchpad git repository Uploads the source package to samba-exporter launchpad ppa Launchpad will trigger a own release workflow now and release the binary package on the ppa as well Create a binary and source package for Ubuntu 21.10 out of the just created release Modifies the sources so a native debian build works Create the binary package Create the source package Pushes the sources modified to a ubuntu-21.10 branch on launchpad git repository Uploads the source package to samba-exporter launchpad ppa Launchpad will trigger a own release workflow now and release the binary package on the ppa as well Create a binary and source package for Debian 10 out of the just created release Modifies the sources so a native debian build works Create the binary package Pushes the sources modified to a debian-10 branch on launchpad git repository Create a binary and source package for Debian 11 out of the just created release Modifies the sources so a native debian build works Create the binary package Pushes the sources modified to a debian-11 branch on launchpad git repository All created binary debian packages will be added as asset to the just created release, so users can download them. Release process \u00b6 The release process of this project is fully automated. To create a new release of the software use the script build/PrepareRelease.sh . Before running the script ensure you got the latest changes from github origin. This script then will: Create a release branch from the current state at the main branch Update the VersionMaster.txt with a new increment version on main branch Update the changelog with a stub entry for the new version on main branch Commit the changes on the main branch Push all changes on main and the new release branch to github Once this changes are pushed to github the CI/CD pipeline will start to run for both, main and the new release/* branch.","title":"Release Process"},{"location":"DeveloperDocs/ActionsAndReleases/#github-actions-and-release-process","text":"This page give information on the GitHub Actions and Release Process used by the project.","title":"GitHub Actions and Release Process"},{"location":"DeveloperDocs/ActionsAndReleases/#cicd-pipeline","text":"For continuous integration and deployment this project uses GitHub Actions . The main pipeline is defined in .github/workflows/ci-jobs.yml . This pipeline will do: On push to any branch on github Build the project and the man pages Run unit tests defined in *_test.go Run integration tests from test/integrationTest/scripts/RunIntegrationTests.sh Run installation tests from test/installationTest/RunInstallationTest.sh Build a debian binary package ( *.deb ) On push to main and release/* branch additionally Upload the binary package ( *.deb ) as GitHub Release In case it's the main branch the release will be a pre release On release/* branches it will be a full public release After a full public release is done from the the CI/CD run on the release/* branch .github/workflows/release-jobs.yml will be triggered. This job runs build/PublishLaunchpadInDocker.sh to: Create a binary and source package for Ubuntu 20.04 out of the just created release Modifies the sources so a native debian build works Create the binary package Create the source package Pushes the sources modified to a ubuntu-20.04 branch on launchpad git repository Uploads the source package to samba-exporter launchpad ppa Launchpad will trigger a own release workflow now and release the binary package on the ppa as well Create a binary and source package for Ubuntu 21.10 out of the just created release Modifies the sources so a native debian build works Create the binary package Create the source package Pushes the sources modified to a ubuntu-21.10 branch on launchpad git repository Uploads the source package to samba-exporter launchpad ppa Launchpad will trigger a own release workflow now and release the binary package on the ppa as well Create a binary and source package for Debian 10 out of the just created release Modifies the sources so a native debian build works Create the binary package Pushes the sources modified to a debian-10 branch on launchpad git repository Create a binary and source package for Debian 11 out of the just created release Modifies the sources so a native debian build works Create the binary package Pushes the sources modified to a debian-11 branch on launchpad git repository All created binary debian packages will be added as asset to the just created release, so users can download them.","title":"CI/CD Pipeline"},{"location":"DeveloperDocs/ActionsAndReleases/#release-process","text":"The release process of this project is fully automated. To create a new release of the software use the script build/PrepareRelease.sh . Before running the script ensure you got the latest changes from github origin. This script then will: Create a release branch from the current state at the main branch Update the VersionMaster.txt with a new increment version on main branch Update the changelog with a stub entry for the new version on main branch Commit the changes on the main branch Push all changes on main and the new release branch to github Once this changes are pushed to github the CI/CD pipeline will start to run for both, main and the new release/* branch.","title":"Release process"},{"location":"DeveloperDocs/Compile/","text":"Developer Guide \u00b6 This page shows you how to build, test and install the project. Build \u00b6 To build the project you need Go Version 1.16.x and Java Version 11 on your development machine. On your target machine, the samba server you want to monitor, you need samba and systemd installed. To build the software change to the repositories directory and run: ./gradlew getBuildName build preparePack In case you want to work on the man pages you need to install ronn on your development machine. To create the man pages out of the *.ronn source files run: build/CreateManPage.sh Run Tests locally \u00b6 To execute the unit tests you can run: ./gradlew test To execute the integration tests you can run: ./test/integrationTest/scripts/RunIntegrationTests.sh Manual installation \u00b6 For manual install on the target machine do the following copy: scp ./tmp/samba-exporter_<version>/* root@<target>:/ Now login to your target machine and run the commands below to enable the services and create the needed user and group: systemctl daemon-reload systemctl enable samba_statusd.service systemctl enable samba_exporter.service addgroup --system samba-exporter adduser --system --no-create-home --disabled-login samba-exporter adduser samba-exporter samba-exporter updatedb # In case you created and copied the man pages as well Finally you are abel to start the services: systemctl start samba_statusd.service systemctl start samba_exporter.service Test the samba_exporter by requesting metrics with curl : curl http://127.0.0.1:9922/metrics The output of this test should look something like this: # HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles. # TYPE go_gc_duration_seconds summary go_gc_duration_seconds{quantile=\"0\"} 0 ... # HELP promhttp_metric_handler_requests_in_flight Current number of scrapes being served. # TYPE promhttp_metric_handler_requests_in_flight gauge promhttp_metric_handler_requests_in_flight 1 # HELP promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code. # TYPE promhttp_metric_handler_requests_total counter promhttp_metric_handler_requests_total{code=\"200\"} 0 promhttp_metric_handler_requests_total{code=\"500\"} 0 promhttp_metric_handler_requests_total{code=\"503\"} 0 # HELP samba_client_count Number of clients using the samba server # TYPE samba_client_count gauge samba_client_count 0 # HELP samba_individual_user_count The number of users connected to this samba server # TYPE samba_individual_user_count gauge samba_individual_user_count 0 # HELP samba_locked_file_count Number of files locked by the samba server # TYPE samba_locked_file_count gauge samba_locked_file_count 0 # HELP samba_pid_count Number of processes running by the samba server # TYPE samba_pid_count gauge samba_pid_count 0 # HELP samba_satutsd_up 1 if the samba_statusd seems to be running # TYPE samba_satutsd_up gauge samba_satutsd_up 1 # HELP samba_server_up 1 if the samba server seems to be running # TYPE samba_server_up gauge samba_server_up 1 # HELP samba_share_count Number of shares used by clients of the samba server # TYPE samba_share_count gauge samba_share_count 0","title":"Developer Guide"},{"location":"DeveloperDocs/Compile/#developer-guide","text":"This page shows you how to build, test and install the project.","title":"Developer Guide"},{"location":"DeveloperDocs/Compile/#build","text":"To build the project you need Go Version 1.16.x and Java Version 11 on your development machine. On your target machine, the samba server you want to monitor, you need samba and systemd installed. To build the software change to the repositories directory and run: ./gradlew getBuildName build preparePack In case you want to work on the man pages you need to install ronn on your development machine. To create the man pages out of the *.ronn source files run: build/CreateManPage.sh","title":"Build"},{"location":"DeveloperDocs/Compile/#run-tests-locally","text":"To execute the unit tests you can run: ./gradlew test To execute the integration tests you can run: ./test/integrationTest/scripts/RunIntegrationTests.sh","title":"Run Tests locally"},{"location":"DeveloperDocs/Compile/#manual-installation","text":"For manual install on the target machine do the following copy: scp ./tmp/samba-exporter_<version>/* root@<target>:/ Now login to your target machine and run the commands below to enable the services and create the needed user and group: systemctl daemon-reload systemctl enable samba_statusd.service systemctl enable samba_exporter.service addgroup --system samba-exporter adduser --system --no-create-home --disabled-login samba-exporter adduser samba-exporter samba-exporter updatedb # In case you created and copied the man pages as well Finally you are abel to start the services: systemctl start samba_statusd.service systemctl start samba_exporter.service Test the samba_exporter by requesting metrics with curl : curl http://127.0.0.1:9922/metrics The output of this test should look something like this: # HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles. # TYPE go_gc_duration_seconds summary go_gc_duration_seconds{quantile=\"0\"} 0 ... # HELP promhttp_metric_handler_requests_in_flight Current number of scrapes being served. # TYPE promhttp_metric_handler_requests_in_flight gauge promhttp_metric_handler_requests_in_flight 1 # HELP promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code. # TYPE promhttp_metric_handler_requests_total counter promhttp_metric_handler_requests_total{code=\"200\"} 0 promhttp_metric_handler_requests_total{code=\"500\"} 0 promhttp_metric_handler_requests_total{code=\"503\"} 0 # HELP samba_client_count Number of clients using the samba server # TYPE samba_client_count gauge samba_client_count 0 # HELP samba_individual_user_count The number of users connected to this samba server # TYPE samba_individual_user_count gauge samba_individual_user_count 0 # HELP samba_locked_file_count Number of files locked by the samba server # TYPE samba_locked_file_count gauge samba_locked_file_count 0 # HELP samba_pid_count Number of processes running by the samba server # TYPE samba_pid_count gauge samba_pid_count 0 # HELP samba_satutsd_up 1 if the samba_statusd seems to be running # TYPE samba_satutsd_up gauge samba_satutsd_up 1 # HELP samba_server_up 1 if the samba server seems to be running # TYPE samba_server_up gauge samba_server_up 1 # HELP samba_share_count Number of shares used by clients of the samba server # TYPE samba_share_count gauge samba_share_count 0","title":"Manual installation"},{"location":"DeveloperDocs/Hints/","text":"Developer Hints \u00b6 VSCode Settings \u00b6 In case you want develop this software with VS Code you need to add the repositories root folder to the GOPATH within the VS Code Settings to get golang extension and golang tools work, e. g.: { \"go.gopath\": \"${env:GOPATH}:${workspaceFolder}\", }","title":"Developer Hints"},{"location":"DeveloperDocs/Hints/#developer-hints","text":"","title":"Developer Hints"},{"location":"DeveloperDocs/Hints/#vscode-settings","text":"In case you want develop this software with VS Code you need to add the repositories root folder to the GOPATH within the VS Code Settings to get golang extension and golang tools work, e. g.: { \"go.gopath\": \"${env:GOPATH}:${workspaceFolder}\", }","title":"VSCode Settings"},{"location":"Installation/InstallationGuide/","text":"Installation Guide \u00b6 Below you can find installation guides for the supported versions. Ubuntu Launchpad \u00b6 The samba exporter package is published on launchpad . To install from there do the following commands on any supported Ubuntu version: sudo add-apt-repository ppa:imker/samba-exporter-ppa sudo apt-get update sudo apt-get install samba-exporter GitHub Releases - For all supported distributions \u00b6 Install the latest Release by downloading the debian package according to your distribution and version and installing it. For example: wget https://github.com/imker25/samba_exporter/releases/download/1.3.5-pre/samba-exporter_1.3.5-pre.ppa1.debian10_amd64.deb sudo dpkg --install ./samba-exporter_1.3.5-pre.ppa1.debian10_amd64.deb Hint: Link and file name needs to be adapted to the latest release. It's also possible to download and install pre-releases from the GitHub this way. For manual installation see the Developer Guide .","title":"Installation Guide"},{"location":"Installation/InstallationGuide/#installation-guide","text":"Below you can find installation guides for the supported versions.","title":"Installation Guide"},{"location":"Installation/InstallationGuide/#ubuntu-launchpad","text":"The samba exporter package is published on launchpad . To install from there do the following commands on any supported Ubuntu version: sudo add-apt-repository ppa:imker/samba-exporter-ppa sudo apt-get update sudo apt-get install samba-exporter","title":"Ubuntu Launchpad"},{"location":"Installation/InstallationGuide/#github-releases-for-all-supported-distributions","text":"Install the latest Release by downloading the debian package according to your distribution and version and installing it. For example: wget https://github.com/imker25/samba_exporter/releases/download/1.3.5-pre/samba-exporter_1.3.5-pre.ppa1.debian10_amd64.deb sudo dpkg --install ./samba-exporter_1.3.5-pre.ppa1.debian10_amd64.deb Hint: Link and file name needs to be adapted to the latest release. It's also possible to download and install pre-releases from the GitHub this way. For manual installation see the Developer Guide .","title":"GitHub Releases - For all supported distributions"},{"location":"Installation/SupportedVersions/","text":"Supported Versions \u00b6 Ubuntu: Version Code Name Supported Ubnutu 20.04 Focal Fossa yes Ubnutu 21.04 Hirsute Hippo no Ubnutu 21.10 Impish Indri yes Debian: Version Code Name Supported Debian 10 Buster yes Debian 11 Bullseye yes Debian testing Bookworm no","title":"Supported Versions"},{"location":"Installation/SupportedVersions/#supported-versions","text":"Ubuntu: Version Code Name Supported Ubnutu 20.04 Focal Fossa yes Ubnutu 21.04 Hirsute Hippo no Ubnutu 21.10 Impish Indri yes Debian: Version Code Name Supported Debian 10 Buster yes Debian 11 Bullseye yes Debian testing Bookworm no","title":"Supported Versions"},{"location":"UserDocs/Concept/","text":"Concept \u00b6 Since the tool smbstatus provided by the samba project can only run with elevated rights, and a prometheus exporter always exposes a public network endpoint, the samba_exporter package contains two services. samba_exporter : The prometheus exporter service that exposes the public network endpoint for the prometheus server to collect the data running as non privileged user samba_statusd : The service uses smbstatus to collect data and return it when requested running as privileged user Both services can communicate using a named pipe owned by a common group.","title":"Concept"},{"location":"UserDocs/Concept/#concept","text":"Since the tool smbstatus provided by the samba project can only run with elevated rights, and a prometheus exporter always exposes a public network endpoint, the samba_exporter package contains two services. samba_exporter : The prometheus exporter service that exposes the public network endpoint for the prometheus server to collect the data running as non privileged user samba_statusd : The service uses smbstatus to collect data and return it when requested running as privileged user Both services can communicate using a named pipe owned by a common group.","title":"Concept"},{"location":"UserDocs/ServiceIntegration/","text":"Service Integration \u00b6 Here you can find how to integrate the samba-exporter service with the prometheus monitoring stack. Prometheus \u00b6 To add this exporter to your prometheus database you have to add the endpoint as scrape job to the /etc/prometheus/prometheus.yml on your prometheus server. Therefor add the lines shown below: - job_name: 'Samba exporter node on server.local' metrics_path: metrics static_configs: - targets: ['server.local:9922'] Replace server.local with the network name of your samba server. Grafana \u00b6 For grafana an example dashboard is installed with the debian package and can be found at /usr/share/doc/samba_exporter/grafana/SambaService.json When importing this dashboard you need to change server.local to the network name of your samba server.","title":"Service Integration"},{"location":"UserDocs/ServiceIntegration/#service-integration","text":"Here you can find how to integrate the samba-exporter service with the prometheus monitoring stack.","title":"Service Integration"},{"location":"UserDocs/ServiceIntegration/#prometheus","text":"To add this exporter to your prometheus database you have to add the endpoint as scrape job to the /etc/prometheus/prometheus.yml on your prometheus server. Therefor add the lines shown below: - job_name: 'Samba exporter node on server.local' metrics_path: metrics static_configs: - targets: ['server.local:9922'] Replace server.local with the network name of your samba server.","title":"Prometheus"},{"location":"UserDocs/ServiceIntegration/#grafana","text":"For grafana an example dashboard is installed with the debian package and can be found at /usr/share/doc/samba_exporter/grafana/SambaService.json When importing this dashboard you need to change server.local to the network name of your samba server.","title":"Grafana"},{"location":"UserDocs/UserGuide/","text":"User Guide \u00b6 For user documentation please read the man pages.","title":"User Guide"},{"location":"UserDocs/UserGuide/#user-guide","text":"For user documentation please read the man pages.","title":"User Guide"}]}