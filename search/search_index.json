{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"Index/","text":"Samba Exporter \u00b6 A prometheus exporter for statistic data of the samba file server . It uses smbstatus to collect the data and converts the result into prometheus style data. The prometheus style data can be requested manually on port 9922 using a http client. Or a prometheus database sever can be configured to collect the data by scraping port 9922 on the samba server. Lear more \u00b6 User Guide Concept Next steps \u00b6 Installation Grafana Stack Integration Last change at Feb 05, 2022 18:29:12 by Tobias Zellner - commit: 113322b","title":"Start Page"},{"location":"Index/#samba-exporter","text":"A prometheus exporter for statistic data of the samba file server . It uses smbstatus to collect the data and converts the result into prometheus style data. The prometheus style data can be requested manually on port 9922 using a http client. Or a prometheus database sever can be configured to collect the data by scraping port 9922 on the samba server.","title":"Samba Exporter"},{"location":"Index/#lear-more","text":"User Guide Concept","title":"Lear more"},{"location":"Index/#next-steps","text":"Installation Grafana Stack Integration Last change at Feb 05, 2022 18:29:12 by Tobias Zellner - commit: 113322b","title":"Next steps"},{"location":"DeveloperDocs/ActionsAndReleases/","text":"GitHub Actions and Release Process \u00b6 This page give information on the GitHub Actions and Release Process used by the project. CI/CD Pipeline \u00b6 For continuous integration and deployment this project uses GitHub Actions . The main pipeline is defined in .github/workflows/ci-jobs.yml . This pipeline will will start on every push to github and then run the steps shown below: %%{init: {'theme':'dark'}}%% graph TD; push(Developer push to GitHub) build[Build and unit tests] docs[Test doc pages creation] insTest[Installation tests] intTest[Integration tests] checkBranch{Check branch} mainB((main)) releaseB((release/*)) otherB((other branch)) preRel[Create GitHub -pre release] releaseP[Create GitHub release] done(Pipeline end) push-->build; push-->docs; build-->insTest; build-->intTest; docs-->checkBranch; insTest-->checkBranch; intTest-->checkBranch; checkBranch-->mainB checkBranch-->releaseB checkBranch-->otherB releaseB-->releaseP mainB-->preRel otherB-->done releaseP-->done preRel-->done Release Pipeline \u00b6 After a GitHub release (also -pre) is created by the the CI/CD pipeline the .github/workflows/release-jobs.yml will be triggered. This job does the following workflow: %%{init: {'theme':'dark'}}%% graph TD; release(GitHub release created) buildUbuntu[Build Ubuntu *.deb packages] buildDebian[Build Debian *.deb packages] docs[Documentation pages creation] repo[Debian repository creation] releaseUbuntuLP[Push Ubuntu *.deb to Launchpad] releaseGH-Deb[Add all created *.deb packages to the GitHub release that triggered this pipeline] pagesRelease[Release on Github pages - Documentation and Debian repository] done(Pipeline end) checkRelease1{Check release} preRelease1(( -pre release)) fullRelease1((release)) checkRelease3{Check release} preRelease3(( -pre release)) fullRelease3((release)) buildFedora[Build Fedora *.rpm packages] releaseGH-Rpm[Add all created *.rpm packages to the GitHub release that triggered this pipeline] release-->buildUbuntu buildUbuntu-->checkRelease1 checkRelease1-->preRelease1 checkRelease1-->fullRelease1 fullRelease1-->releaseUbuntuLP releaseUbuntuLP-->buildDebian preRelease1 --> buildDebian buildDebian-->docs docs-->repo repo-->releaseGH-Deb releaseGH-Deb-->checkRelease3 checkRelease3-->preRelease3 checkRelease3-->fullRelease3 fullRelease3-->pagesRelease release-->buildFedora buildFedora-->releaseGH-Rpm releaseGH-Rpm-->done pagesRelease-->done preRelease3-->done Whenever a *.deb package is uploaded to the samba-exporter PPA launchpad will start a own release process. When this process is finished (usually takes about an hour), users can download and install the new package version from the PPA. Creation of release branches \u00b6 The release process of this project is fully automated. To create a new release (not -pre) of the software use the script build/PrepareRelease.sh . Before running the script ensure you are on main branch and got the latest changes from GitHub origin. This script will: Create a release branch from the current state at the main branch Update the VersionMaster.txt with a new increment version on main branch Commit the changes on the main branch Push all changes on main and the new release branch to GitHub Once this changes are pushed to github the CI/CD pipeline will start to run for both, main and the new release branch. This will create a new -pre Release from main as well as a new full Release from the new release branch. Last change at Feb 05, 2022 18:29:12 by Tobias Zellner - commit: 113322b","title":"Release Process"},{"location":"DeveloperDocs/ActionsAndReleases/#github-actions-and-release-process","text":"This page give information on the GitHub Actions and Release Process used by the project.","title":"GitHub Actions and Release Process"},{"location":"DeveloperDocs/ActionsAndReleases/#cicd-pipeline","text":"For continuous integration and deployment this project uses GitHub Actions . The main pipeline is defined in .github/workflows/ci-jobs.yml . This pipeline will will start on every push to github and then run the steps shown below: %%{init: {'theme':'dark'}}%% graph TD; push(Developer push to GitHub) build[Build and unit tests] docs[Test doc pages creation] insTest[Installation tests] intTest[Integration tests] checkBranch{Check branch} mainB((main)) releaseB((release/*)) otherB((other branch)) preRel[Create GitHub -pre release] releaseP[Create GitHub release] done(Pipeline end) push-->build; push-->docs; build-->insTest; build-->intTest; docs-->checkBranch; insTest-->checkBranch; intTest-->checkBranch; checkBranch-->mainB checkBranch-->releaseB checkBranch-->otherB releaseB-->releaseP mainB-->preRel otherB-->done releaseP-->done preRel-->done","title":"CI/CD Pipeline"},{"location":"DeveloperDocs/ActionsAndReleases/#release-pipeline","text":"After a GitHub release (also -pre) is created by the the CI/CD pipeline the .github/workflows/release-jobs.yml will be triggered. This job does the following workflow: %%{init: {'theme':'dark'}}%% graph TD; release(GitHub release created) buildUbuntu[Build Ubuntu *.deb packages] buildDebian[Build Debian *.deb packages] docs[Documentation pages creation] repo[Debian repository creation] releaseUbuntuLP[Push Ubuntu *.deb to Launchpad] releaseGH-Deb[Add all created *.deb packages to the GitHub release that triggered this pipeline] pagesRelease[Release on Github pages - Documentation and Debian repository] done(Pipeline end) checkRelease1{Check release} preRelease1(( -pre release)) fullRelease1((release)) checkRelease3{Check release} preRelease3(( -pre release)) fullRelease3((release)) buildFedora[Build Fedora *.rpm packages] releaseGH-Rpm[Add all created *.rpm packages to the GitHub release that triggered this pipeline] release-->buildUbuntu buildUbuntu-->checkRelease1 checkRelease1-->preRelease1 checkRelease1-->fullRelease1 fullRelease1-->releaseUbuntuLP releaseUbuntuLP-->buildDebian preRelease1 --> buildDebian buildDebian-->docs docs-->repo repo-->releaseGH-Deb releaseGH-Deb-->checkRelease3 checkRelease3-->preRelease3 checkRelease3-->fullRelease3 fullRelease3-->pagesRelease release-->buildFedora buildFedora-->releaseGH-Rpm releaseGH-Rpm-->done pagesRelease-->done preRelease3-->done Whenever a *.deb package is uploaded to the samba-exporter PPA launchpad will start a own release process. When this process is finished (usually takes about an hour), users can download and install the new package version from the PPA.","title":"Release Pipeline"},{"location":"DeveloperDocs/ActionsAndReleases/#creation-of-release-branches","text":"The release process of this project is fully automated. To create a new release (not -pre) of the software use the script build/PrepareRelease.sh . Before running the script ensure you are on main branch and got the latest changes from GitHub origin. This script will: Create a release branch from the current state at the main branch Update the VersionMaster.txt with a new increment version on main branch Commit the changes on the main branch Push all changes on main and the new release branch to GitHub Once this changes are pushed to github the CI/CD pipeline will start to run for both, main and the new release branch. This will create a new -pre Release from main as well as a new full Release from the new release branch. Last change at Feb 05, 2022 18:29:12 by Tobias Zellner - commit: 113322b","title":"Creation of release branches"},{"location":"DeveloperDocs/Compile/","text":"Developer Guide \u00b6 This page shows you how to build, test and install the project manually. Build \u00b6 To build the project you need the following on your development machine. Go Version 1.16.x Java Version 11 Git >= Version 2.30 lsb_release ronn - Only in case you want to work on man pages To build the software change to the repositories directory and run: ./gradlew getBuildName build preparePack To figure out all the valid gradle tasks, read build.gradle Create man pages \u00b6 To create the man pages out of the *.ronn source files in src/man run: build/CreateManPage.sh Run Tests locally \u00b6 To execute the unit tests you can run: ./gradlew test Hint: As always it is possible to combine the gradle commands, e. g. ./gradlew build test To execute the integration tests you can run: ./test/integrationTest/scripts/RunIntegrationTests.sh Manual installation \u00b6 On your target machine, the samba server you want to monitor, you need samba and systemd installed. To build for manual installation run the following: ./gradlew getBuildName build preparePack build/CreateManPage.sh For manual install on the target machine do the following copy after you build the project as shown above: rsync -avr --exclude 'DEBIAN' --exclude 'samba-exporter.spec' ./tmp/samba-exporter_<version>/* root@<target>:/ Now login to your target machine and run the commands below to enable the services and create the needed user and group: systemctl daemon-reload systemctl enable samba_statusd.service systemctl enable samba_exporter.service addgroup --system samba-exporter adduser --system --no-create-home --disabled-login samba-exporter adduser samba-exporter samba-exporter mandb # In case you created and copied the man pages as well Finally you are abel to start the services: systemctl start samba_statusd.service systemctl start samba_exporter.service Test installation \u00b6 Test the samba_exporter by requesting metrics with curl : curl http://127.0.0.1:9922/metrics The output of this test should look something like this: # HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles. # TYPE go_gc_duration_seconds summary go_gc_duration_seconds{quantile=\"0\"} 0 ... # HELP promhttp_metric_handler_requests_in_flight Current number of scrapes being served. # TYPE promhttp_metric_handler_requests_in_flight gauge promhttp_metric_handler_requests_in_flight 1 # HELP promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code. # TYPE promhttp_metric_handler_requests_total counter promhttp_metric_handler_requests_total{code=\"200\"} 0 promhttp_metric_handler_requests_total{code=\"500\"} 0 promhttp_metric_handler_requests_total{code=\"503\"} 0 # HELP samba_client_count Number of clients using the samba server # TYPE samba_client_count gauge samba_client_count 0 # HELP samba_individual_user_count The number of users connected to this samba server # TYPE samba_individual_user_count gauge samba_individual_user_count 0 # HELP samba_locked_file_count Number of files locked by the samba server # TYPE samba_locked_file_count gauge samba_locked_file_count 0 # HELP samba_pid_count Number of processes running by the samba server # TYPE samba_pid_count gauge samba_pid_count 0 # HELP samba_satutsd_up 1 if the samba_statusd seems to be running # TYPE samba_satutsd_up gauge samba_satutsd_up 1 # HELP samba_server_up 1 if the samba server seems to be running # TYPE samba_server_up gauge samba_server_up 1 # HELP samba_share_count Number of shares used by clients of the samba server # TYPE samba_share_count gauge samba_share_count 0 \u00b6 Last change at Feb 05, 2022 18:29:12 by Tobias Zellner - commit: 113322b","title":"Developer Guide"},{"location":"DeveloperDocs/Compile/#developer-guide","text":"This page shows you how to build, test and install the project manually.","title":"Developer Guide"},{"location":"DeveloperDocs/Compile/#build","text":"To build the project you need the following on your development machine. Go Version 1.16.x Java Version 11 Git >= Version 2.30 lsb_release ronn - Only in case you want to work on man pages To build the software change to the repositories directory and run: ./gradlew getBuildName build preparePack To figure out all the valid gradle tasks, read build.gradle","title":"Build"},{"location":"DeveloperDocs/Compile/#create-man-pages","text":"To create the man pages out of the *.ronn source files in src/man run: build/CreateManPage.sh","title":"Create man pages"},{"location":"DeveloperDocs/Compile/#run-tests-locally","text":"To execute the unit tests you can run: ./gradlew test Hint: As always it is possible to combine the gradle commands, e. g. ./gradlew build test To execute the integration tests you can run: ./test/integrationTest/scripts/RunIntegrationTests.sh","title":"Run Tests locally"},{"location":"DeveloperDocs/Compile/#manual-installation","text":"On your target machine, the samba server you want to monitor, you need samba and systemd installed. To build for manual installation run the following: ./gradlew getBuildName build preparePack build/CreateManPage.sh For manual install on the target machine do the following copy after you build the project as shown above: rsync -avr --exclude 'DEBIAN' --exclude 'samba-exporter.spec' ./tmp/samba-exporter_<version>/* root@<target>:/ Now login to your target machine and run the commands below to enable the services and create the needed user and group: systemctl daemon-reload systemctl enable samba_statusd.service systemctl enable samba_exporter.service addgroup --system samba-exporter adduser --system --no-create-home --disabled-login samba-exporter adduser samba-exporter samba-exporter mandb # In case you created and copied the man pages as well Finally you are abel to start the services: systemctl start samba_statusd.service systemctl start samba_exporter.service","title":"Manual installation"},{"location":"DeveloperDocs/Compile/#test-installation","text":"Test the samba_exporter by requesting metrics with curl : curl http://127.0.0.1:9922/metrics The output of this test should look something like this: # HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles. # TYPE go_gc_duration_seconds summary go_gc_duration_seconds{quantile=\"0\"} 0 ... # HELP promhttp_metric_handler_requests_in_flight Current number of scrapes being served. # TYPE promhttp_metric_handler_requests_in_flight gauge promhttp_metric_handler_requests_in_flight 1 # HELP promhttp_metric_handler_requests_total Total number of scrapes by HTTP status code. # TYPE promhttp_metric_handler_requests_total counter promhttp_metric_handler_requests_total{code=\"200\"} 0 promhttp_metric_handler_requests_total{code=\"500\"} 0 promhttp_metric_handler_requests_total{code=\"503\"} 0 # HELP samba_client_count Number of clients using the samba server # TYPE samba_client_count gauge samba_client_count 0 # HELP samba_individual_user_count The number of users connected to this samba server # TYPE samba_individual_user_count gauge samba_individual_user_count 0 # HELP samba_locked_file_count Number of files locked by the samba server # TYPE samba_locked_file_count gauge samba_locked_file_count 0 # HELP samba_pid_count Number of processes running by the samba server # TYPE samba_pid_count gauge samba_pid_count 0 # HELP samba_satutsd_up 1 if the samba_statusd seems to be running # TYPE samba_satutsd_up gauge samba_satutsd_up 1 # HELP samba_server_up 1 if the samba server seems to be running # TYPE samba_server_up gauge samba_server_up 1 # HELP samba_share_count Number of shares used by clients of the samba server # TYPE samba_share_count gauge samba_share_count 0","title":"Test installation"},{"location":"DeveloperDocs/Compile/#_1","text":"Last change at Feb 05, 2022 18:29:12 by Tobias Zellner - commit: 113322b","title":""},{"location":"DeveloperDocs/Hints/","text":"Developer Hints \u00b6 VSCode Settings \u00b6 In case you want develop this software with VS Code you need to add the repositories root folder to the GOPATH within the VS Code Settings to get golang extension and golang tools work, e. g.: { \"go.gopath\": \"${env:GOPATH}:${workspaceFolder}\", } \u00b6 Last change at Feb 05, 2022 18:29:12 by Tobias Zellner - commit: 113322b","title":"Developer Hints"},{"location":"DeveloperDocs/Hints/#developer-hints","text":"","title":"Developer Hints"},{"location":"DeveloperDocs/Hints/#vscode-settings","text":"In case you want develop this software with VS Code you need to add the repositories root folder to the GOPATH within the VS Code Settings to get golang extension and golang tools work, e. g.: { \"go.gopath\": \"${env:GOPATH}:${workspaceFolder}\", }","title":"VSCode Settings"},{"location":"DeveloperDocs/Hints/#_1","text":"Last change at Feb 05, 2022 18:29:12 by Tobias Zellner - commit: 113322b","title":""},{"location":"Installation/InstallationGuide/","text":"Installation Guide \u00b6 Below you can find installation guides for the supported versions. Ubuntu Launchpad \u00b6 The samba exporter package for Ubuntu is published on launchpad . To install from there do the following commands on any supported Ubuntu version: sudo add-apt-repository ppa:imker/samba-exporter-ppa sudo apt-get update sudo apt-get install samba-exporter Debian \u00b6 The samba exporter package for Debian is published on the projects GitHub Page. To install execute the commands shown below as root: wget -qO - https://imker25.github.io/samba_exporter/repos/debian/archive.key | sudo apt-key add - echo \"deb https://imker25.github.io/samba_exporter/repos/debian bullseye main\" > /etc/apt/sources.list.d/samba-exporter.list apt-get update apt-get install samba-exporter Hint: Change bullseye to buster in case you use Debian 10. GitHub Releases - For debian based distributions \u00b6 Install the latest Release by downloading the debian package according to your distribution and version and installing it. For example: wget https://github.com/imker25/samba_exporter/releases/download/1.3.5-pre/samba-exporter_1.3.5-pre.ppa1.debian10_amd64.deb sudo dpkg --install ./samba-exporter_1.3.5-pre.ppa1.debian10_amd64.deb Hint: Link and file name needs to be adapted to the latest release. It's also possible to download and install pre-releases from the GitHub this way. GitHub Releases - For RPM based distributions \u00b6 Install the latest Release by downloading the rpm package according to your distribution and version and installing it. For example: wget https://github.com/imker25/samba_exporter/releases/download/1.11.9-pre/samba-exporter-1.11.9-1.x86_64.fedora35.rpm sudo rpm -U samba-exporter-1.11.9-1.x86_64.fedora35.rpm Hint: Link and file name needs to be adapted to the latest release. It's also possible to download and install pre-releases from the GitHub this way. For manual installation see the Developer Guide . Last change at Feb 05, 2022 18:29:12 by Tobias Zellner - commit: 113322b","title":"Installation Guide"},{"location":"Installation/InstallationGuide/#installation-guide","text":"Below you can find installation guides for the supported versions.","title":"Installation Guide"},{"location":"Installation/InstallationGuide/#ubuntu-launchpad","text":"The samba exporter package for Ubuntu is published on launchpad . To install from there do the following commands on any supported Ubuntu version: sudo add-apt-repository ppa:imker/samba-exporter-ppa sudo apt-get update sudo apt-get install samba-exporter","title":"Ubuntu Launchpad"},{"location":"Installation/InstallationGuide/#debian","text":"The samba exporter package for Debian is published on the projects GitHub Page. To install execute the commands shown below as root: wget -qO - https://imker25.github.io/samba_exporter/repos/debian/archive.key | sudo apt-key add - echo \"deb https://imker25.github.io/samba_exporter/repos/debian bullseye main\" > /etc/apt/sources.list.d/samba-exporter.list apt-get update apt-get install samba-exporter Hint: Change bullseye to buster in case you use Debian 10.","title":"Debian"},{"location":"Installation/InstallationGuide/#github-releases-for-debian-based-distributions","text":"Install the latest Release by downloading the debian package according to your distribution and version and installing it. For example: wget https://github.com/imker25/samba_exporter/releases/download/1.3.5-pre/samba-exporter_1.3.5-pre.ppa1.debian10_amd64.deb sudo dpkg --install ./samba-exporter_1.3.5-pre.ppa1.debian10_amd64.deb Hint: Link and file name needs to be adapted to the latest release. It's also possible to download and install pre-releases from the GitHub this way.","title":"GitHub Releases - For debian based distributions"},{"location":"Installation/InstallationGuide/#github-releases-for-rpm-based-distributions","text":"Install the latest Release by downloading the rpm package according to your distribution and version and installing it. For example: wget https://github.com/imker25/samba_exporter/releases/download/1.11.9-pre/samba-exporter-1.11.9-1.x86_64.fedora35.rpm sudo rpm -U samba-exporter-1.11.9-1.x86_64.fedora35.rpm Hint: Link and file name needs to be adapted to the latest release. It's also possible to download and install pre-releases from the GitHub this way. For manual installation see the Developer Guide . Last change at Feb 05, 2022 18:29:12 by Tobias Zellner - commit: 113322b","title":"GitHub Releases - For RPM based distributions"},{"location":"Installation/SupportedVersions/","text":"Supported Versions \u00b6 Debian based \u00b6 Ubuntu: Version Code Name Supported Ubnutu 20.04 Focal Fossa yes Ubnutu 21.04 Hirsute Hippo no Ubnutu 21.10 Impish Indri yes Debian: Version Code Name Supported Debian 10 Buster yes Debian 11 Bullseye yes Debian testing Bookworm no RPM based \u00b6 Fedora Version Release Supported Fedora 35 2021-11-02 yes Fedora 36 2022-04-19 no --- Last change at Feb 05, 2022 18:29:12 by Tobias Zellner - commit: 113322b","title":"Supported Versions"},{"location":"Installation/SupportedVersions/#supported-versions","text":"","title":"Supported Versions"},{"location":"Installation/SupportedVersions/#debian-based","text":"Ubuntu: Version Code Name Supported Ubnutu 20.04 Focal Fossa yes Ubnutu 21.04 Hirsute Hippo no Ubnutu 21.10 Impish Indri yes Debian: Version Code Name Supported Debian 10 Buster yes Debian 11 Bullseye yes Debian testing Bookworm no","title":"Debian based"},{"location":"Installation/SupportedVersions/#rpm-based","text":"Fedora Version Release Supported Fedora 35 2021-11-02 yes Fedora 36 2022-04-19 no --- Last change at Feb 05, 2022 18:29:12 by Tobias Zellner - commit: 113322b","title":"RPM based"},{"location":"UserDocs/Concept/","text":"Concept \u00b6 Since the tool smbstatus provided by the samba project can only run with elevated rights, and a prometheus exporter always exposes a public network endpoint, the samba_exporter package contains two services. samba_exporter : The prometheus exporter service that exposes the public network endpoint for the prometheus server to collect the data running as non privileged user samba_statusd : The service uses smbstatus to collect data and return it when requested running as privileged user Both services can communicate using a named pipe owned by a common group, see diagram below. %%{init: {'theme':'dark'}}%% sequenceDiagram participant samba_exporter participant request.pipe participant response.pipe participant samba_statusd samba_exporter->>request.pipe: Request status data loop samba_statusd ->> request.pipe: Check request data end samba_statusd ->> samba_statusd: Process request samba_statusd ->> response.pipe: Send response data loop samba_exporter ->> response.pipe: Wait for response end samba_exporter ->> samba_exporter: Process response \u00b6 Last change at Feb 05, 2022 18:29:12 by Tobias Zellner - commit: 113322b","title":"Concept"},{"location":"UserDocs/Concept/#concept","text":"Since the tool smbstatus provided by the samba project can only run with elevated rights, and a prometheus exporter always exposes a public network endpoint, the samba_exporter package contains two services. samba_exporter : The prometheus exporter service that exposes the public network endpoint for the prometheus server to collect the data running as non privileged user samba_statusd : The service uses smbstatus to collect data and return it when requested running as privileged user Both services can communicate using a named pipe owned by a common group, see diagram below. %%{init: {'theme':'dark'}}%% sequenceDiagram participant samba_exporter participant request.pipe participant response.pipe participant samba_statusd samba_exporter->>request.pipe: Request status data loop samba_statusd ->> request.pipe: Check request data end samba_statusd ->> samba_statusd: Process request samba_statusd ->> response.pipe: Send response data loop samba_exporter ->> response.pipe: Wait for response end samba_exporter ->> samba_exporter: Process response","title":"Concept"},{"location":"UserDocs/Concept/#_1","text":"Last change at Feb 05, 2022 18:29:12 by Tobias Zellner - commit: 113322b","title":""},{"location":"UserDocs/ServiceIntegration/","text":"Grafana Stack Integration \u00b6 Here you can find how to integrate the samba-exporter service with the prometheus monitoring stack. Prometheus \u00b6 To add this exporter to your prometheus database you have to add the endpoint as scrape job to the /etc/prometheus/prometheus.yml on your prometheus server. Therefor add the lines shown below: - job_name: 'Samba exporter node on server.local' metrics_path: metrics static_configs: - targets: ['server.local:9922'] Replace server.local with the network name of your samba server. Grafana \u00b6 For grafana an example dashboard is installed with the debian package and can be found at /usr/share/doc/samba-exporter/grafana/SambaService.json Here is a screenshot of the example dashboard on a live system: When importing this dashboard you need to change server.local to the network name of your samba server. Last change at Feb 05, 2022 18:29:12 by Tobias Zellner - commit: 113322b","title":"Service Integration"},{"location":"UserDocs/ServiceIntegration/#grafana-stack-integration","text":"Here you can find how to integrate the samba-exporter service with the prometheus monitoring stack.","title":"Grafana Stack Integration"},{"location":"UserDocs/ServiceIntegration/#prometheus","text":"To add this exporter to your prometheus database you have to add the endpoint as scrape job to the /etc/prometheus/prometheus.yml on your prometheus server. Therefor add the lines shown below: - job_name: 'Samba exporter node on server.local' metrics_path: metrics static_configs: - targets: ['server.local:9922'] Replace server.local with the network name of your samba server.","title":"Prometheus"},{"location":"UserDocs/ServiceIntegration/#grafana","text":"For grafana an example dashboard is installed with the debian package and can be found at /usr/share/doc/samba-exporter/grafana/SambaService.json Here is a screenshot of the example dashboard on a live system: When importing this dashboard you need to change server.local to the network name of your samba server. Last change at Feb 05, 2022 18:29:12 by Tobias Zellner - commit: 113322b","title":"Grafana"},{"location":"UserDocs/UserGuide/","text":"User Guide \u00b6 For user documentation please read the man pages: samba_exporter samba_statusd start_samba_statusd In case you installed the package already, you can read the man pages using man. For example: man samba_exporter \u00b6 Last change at Feb 05, 2022 18:29:12 by Tobias Zellner - commit: 113322b","title":"User Guide"},{"location":"UserDocs/UserGuide/#user-guide","text":"For user documentation please read the man pages: samba_exporter samba_statusd start_samba_statusd In case you installed the package already, you can read the man pages using man. For example: man samba_exporter","title":"User Guide"},{"location":"UserDocs/UserGuide/#_1","text":"Last change at Feb 05, 2022 18:29:12 by Tobias Zellner - commit: 113322b","title":""}]}